<script lang="ts">
	// @ts-nocheck

	import { LayerCake, Svg } from 'layercake';
	import { draggable } from '@neodrag/svelte';
	import Circle from './Circle.svelte';
	import Leg from './Leg.svelte';
	import { writable } from 'svelte/store';
	import AxisX from './AxisX.svelte';
	import AxisY from './AxisY.svelte';
	import Line from './Line.svelte';
	import { onMount } from 'svelte';
	import { ChevronDown, ChevronUp, Icon } from 'svelte-hero-icons';

	let allLineData = writable();
	let data = writable([]);

	const xKey = 'x';
	const yKey = 'y';

	let panEndPos = { x: 0, y: 0 };
	let panEndPosRel = { x: 0, y: 0 };

	let xMin = 100;
	let xMax = 200;
	let yMin = -20;
	let yMax = 60;

	let svgElement;
	let svgPanZoomInstance;

	const handleClick = () => {
		console.log('handleClick');
		const innerElement = svgElement.getRootNode();
		console.log('innerElement', innerElement);
	};

	let showStats = true;

	const createEntry = () => {
		const { subscribe, set, update } = writable('');

		return {
			subscribe,
			set
		};
	};

	let obj = {};

	const entryValue = createEntry();

	const handleEntryKey = (e) => {
		const current = e.target.value;
		const words = e.target.value.split(' ');
		const incoming = e.key.toUpperCase();

		// console.log({
		// 	current,
		// 	words,
		// 	incoming,
		// 	x: incoming === 'C'
		// });

		if (incoming === 'C') {
			entryValue.set('CALL');
		}
		if (incoming === 'P') {
			entryValue.set('PUT');
		}

		if (words.length === 3 && incoming === 'B') {
			entryValue.set(`${words[0]} ${words[1]} ${'BUY'}`);
		}
		if (words.length === 3 && incoming === 'S') {
			entryValue.set(`${words[0]} ${words[1]} ${'SELL'}`);
		}

		if (incoming === ' ') {
			// add a space to the value
			entryValue.set(`${current} `);
		}

		if (!isNaN(incoming) || incoming === '.') {
			// add a space to the value
			entryValue.set(`${current}${incoming}`);
		}

		// if len is 1
		if (words.length === 1 && !isNaN(incoming)) {
			// last word add to it
			const final = words[0] + incoming;
			words[0] = final;

			const [strike] = words;

			// console.log({ strike });

			obj = {
				strike
			};
		}

		// if len is 2
		if (words.length === 2 && !isNaN(incoming)) {
			// last word add to it
			const final = words[1] + incoming;
			words[1] = final;

			const [kind, strike] = words;

			// console.log({ kind, strike });

			obj = {
				kind,
				strike
			};
		}

		// if len is 3
		if (words.length === 3 && !isNaN(incoming)) {
			// last word add to it
			const final = words[2] + incoming;
			words[2] = final;

			const [kind, strike, price] = words;

			// console.log({ kind, strike, price });

			obj = {
				kind,
				strike,
				price
			};
		}

		// if len is 4
		if (words.length === 4 && !isNaN(incoming)) {
			// last word add to it
			const final = words[3] + incoming;
			words[3] = final;

			const [kind, strike, buySell, quantity] = words;

			// console.log({ kind, strike, buySell, quantity });

			obj = {
				kind,
				strike,
				buySell,
				quantity
			};
		}

		// if len is 5
		if (words.length === 5 && !isNaN(incoming)) {
			// last word add to it
			const final = words[4] + incoming;
			words[4] = final;

			const [kind, strike, buySell, quantity, price] = words;

			obj = {
				kind,
				strike,
				buySell,
				quantity,
				price
			};

			// console.log({ kind, strike, buySell, quantity, price });
		}

		event.preventDefault();

		// // if C we want to set the value to
		// if (words.length === 1) {
		// 	if (current[0].toUpperCase() === 'C') {
		// 		e.target.value = 'CALL';
		// 	} else if (current[0].toUpperCase() === 'P') {
		// 		e.target.value = 'PUT';
		// 	}
		// }

		// if (words.length === 3) {
		// 	// check if e.key
		// 	if (incoming === 'B') {
		// 		console.log('BUY');
		// 		e.target.value = `${words[0]} ${words[1]} ${'BUY'}`;
		// 	} else if (incoming === 'S') {
		// 		e.target.value = `${words[0]} ${words[1]} ${'SELL'}`;
		// 	}
		// }

		// console.log(e.target.value);

		// entryValue = e.target.value.toUpperCase();
	};

	let legs = writable([
		{
			kind: 'CALL',
			strike: 130,
			buySell: 'BUY',
			quantity: 1,
			price: 1,
			//
			showOnChart: true,
			spotlight: false,
			lineColor: '#6E00FF'
		},
		{
			kind: 'CALL',
			strike: 150,
			buySell: 'SELL',
			quantity: 2,
			price: 1,
			//
			showOnChart: true,
			spotlight: false,
			lineColor: '#5BFF00'
		},
		{
			kind: 'CALL',
			strike: 170,
			buySell: 'BUY',
			quantity: 1,
			price: 0.5,
			//
			showOnChart: true,
			spotlight: false,
			lineColor: '#00FFD4'
		}
	]);

	const valueOfCallAtPrice = (strike: number, current: number) => {
		return Math.max(0, current - strike);
	};

	const valueOfSoldCallAtPrice = (strike: number, current: number) => {
		return Math.min(0, strike - current);
		// return Math.min(0, current - strike);
	};

	const valueOfPutAtPrice = (strike: number, current: number) => {
		return Math.max(0, strike - current);
	};

	const valueOfSoldPutAtPrice = (strike: number, current: number) => {
		return Math.max(0, current - strike);
	};

	const getValueAtPrice = (strike: number, current: number, kind: string, buySell: string) => {
		if (kind === 'CALL') {
			if (buySell === 'BUY') {
				return valueOfCallAtPrice(strike, current);
			} else if (buySell === 'SELL') {
				return valueOfSoldCallAtPrice(strike, current);
			}
		} else if (kind === 'PUT') {
			if (buySell === 'BUY') {
				return valueOfPutAtPrice(strike, current);
			} else if (buySell === 'SELL') {
				return valueOfSoldPutAtPrice(strike, current);
			}
		}
	};

	const getLineForLeg = ({ kind, strike, buySell, quantity, price, start, end }: any) => {
		const line = [];
		for (let i = start; i < end; i++) {
			const x = i;
			const y = strike;

			// if (kind === 'CALL') {
			// 	if (buySell === 'BUY') {
			// 		const value = valueOfCallAtPrice(strike, x) - price;
			// 		const valueScaled = value * quantity;
			// 		line.push({ x, y: valueScaled, value, valueScaled });
			// 	} else if (buySell === 'SELL') {
			// 		const value = valueOfSoldCallAtPrice(strike, x) + price;
			// 		const valueScaled = value * quantity;
			// 		line.push({ x, y: valueScaled, value, valueScaled });
			// 	}
			// } else if (kind === 'PUT') {
			// 	if (buySell === 'BUY') {
			// 		const value = valueOfPutAtPrice(strike, x) - price;
			// 		const valueScaled = value * quantity;
			// 		line.push({ x, y: valueScaled, value, valueScaled });
			// 	} else if (buySell === 'SELL') {
			// 		const value = valueOfSoldPutAtPrice(strike, x) + price;
			// 		const valueScaled = value * quantity;
			// 		line.push({ x, y: valueScaled, value, valueScaled });
			// 	}
			// }

			// replace above with getValueAtPrice
			const value =
				getValueAtPrice(strike, x, kind, buySell) + (buySell === 'SELL' ? -price : price);
			const valueScaled = value * quantity;
			line.push({ x, y: valueScaled, value, valueScaled });

			// const value = valueOfCallAtPrice(strike, x);
			// const valueScaled = value * quantity;
			// line.push({ x, y, value, valueScaled });
		}
		return line;
	};

	const getIntersections = (lines) => {
		const intersections = [];

		for (let i = 0; i < lines.length; i++) {
			const line = lines[i];
			for (let j = 0; j < line.length; j++) {
				const point = line[j];
				const { x, y } = point;
				const intersection = { x, y, lines: [i] };
				intersections.push(intersection);
			}
		}

		return intersections;
	};

	const calculateLines = (legs) => {
		const lines = [];
		// for each leg get the x and y
		legs.forEach((leg) => {
			const { kind, strike, buySell, quantity, price } = leg;

			const line = getLineForLeg({
				kind,
				strike,
				buySell,
				quantity,
				price,
				//
				start: xMin,
				end: xMax
			});

			lines.push({ leg, line });
		});

		// if len is > 1 set last leg's
		if (legs.length > 0) {
			let newLine = lines[lines.length - 1].line;

			console.log([newLine]);

			data.set(newLine);
		}

		// add a new line that is the sum of all lines at each point
		const sumLine = [];

		let rangeMax = lines[0].line.length;

		for (let i = 0; i < rangeMax; i++) {
			let sum = 0;
			lines.forEach((line) => {
				sum += line.line[i].valueScaled;
			});
			const currentX = lines[0].line[i].x;
			sumLine.push({ x: currentX, y: sum });
		}
		lines.push({
			leg: {
				kind: 'SUM',
				strike: 0,
				buySell: '',
				quantity: 0,
				price: 0,
				//
				showOnChart: true,
				spotlight: true,
				lineColor: '#FFFFFF22'
			},
			line: sumLine
		});
		return lines;
	};

	legs.subscribe((legs) => {
		let lines = calculateLines(legs);
		allLineData.set(lines);
	});

	const handleOnChangeShowOnChart = (showOnChart, leg) => {
		// update the leg
		// legs = legs.map((l) => {
		// 	if (l === leg) {
		// 		return {
		// 			...l,
		// 			showOnChart
		// 		};
		// 	}
		// 	return l;
		// });

		// fix for writable
		legs.update((legs) => {
			return legs.map((l) => {
				if (l === leg) {
					return {
						...l,
						showOnChart
					};
				}
				return l;
			});
		});
	};

	const handleOnChageSpotlight = (spotlight, leg) => {
		// only one leg can be spotlighted at a time
		// legs = legs.map((l) => {
		// 	if (l === leg) {
		// 		return {
		// 			...l,
		// 			spotlight
		// 		};
		// 	}
		// 	return {
		// 		...l,
		// 		spotlight: false
		// 	};
		// });

		legs.update((legs) => {
			return legs.map((l) => {
				if (l === leg) {
					return {
						...l,
						showOnChart: true,
						spotlight
					};
				}
				return {
					...l,
					spotlight: false
				};
			});
		});
	};

	const handleOnRemoveLegAtIndex = (legIndex) => {
		// remove the leg
		// legs = legs.filter((l, i) => i !== legIndex);

		legs.update((legs) => {
			return legs.filter((l, i) => i !== legIndex);
		});
	};

	const handleOnAddLeg = () => {
		// add the leg
		console.log('add the leg');
		console.log(obj);

		// // add obj to legs array and make sure keys are in the right order
		// legs = [
		// 	...legs,
		// 	{
		// 		kind: obj.kind,
		// 		strike: parseFloat(obj.strike),
		// 		buySell: obj.buySell,
		// 		quantity: parseFloat(obj.quantity),
		// 		price: parseFloat(obj.price),
		// 		showOnChart: true
		// 	}
		// ];

		legs.update((legs) => {
			return [
				...legs,
				{
					kind: obj.kind,
					strike: parseFloat(obj.strike),
					buySell: obj.buySell,
					quantity: parseFloat(obj.quantity),
					price: parseFloat(obj.price),
					showOnChart: true
				}
			];
		});
	};

	let xDots = writable([]);

	const fitMainAreaIntoView = () => {
		// use the max y value of the last line to determine a good center x value
	};

	onMount(() => {
		const innerElement = svgElement.$$.ctx[0];

		// listen for drag events
		// draggable(innerElement, {
		// 	onDragStart: (e) => {
		// 		console.log('onDragStart', e);

		// 	},
		// 	onDrag: (e) => {
		// 		console.log('onDrag', e);

		// 	},
		// 	onDragEnd: (e) => {
		// 		console.log('onDragEnd', e);

		// 	}
		// });

		let isPanning = false;
		let panStartPos = { x: 0, y: 0 };
		// let panEndPos = { x: 0, y: 0 };

		let timeout = null;
		innerElement.addEventListener('wheel', (e) => {
			console.log('wheel', e);

			// // set xMin, xMax, yMin, yMax
			// // to zoom in or out based on deltaY
			xMin += Math.round(e.deltaY * 0.015);
			xMax -= Math.round(e.deltaY * 0.015);
			yMin += Math.round(e.deltaY * 0.015);
			yMax -= Math.round(e.deltaY * 0.015);

			// set timeout and cancel if another event is fired
			if (timeout) {
				clearTimeout(timeout);
			}
			timeout = setTimeout(() => {
				// update the lines
				// let lines = calculateLines(legs);
				// allLineData.set(lines);

				legs.update((legs) => {
					return legs;
				});
			}, 0);
		});

		// listen for mousedown and track the mousemove and mouseup events
		innerElement.addEventListener('mousedown', (e) => {
			console.log('mousedown', e);
			isPanning = true;
			panStartPos = { x: e.clientX, y: e.clientY };
		});

		// listen for mousemove and mouseup events
		innerElement.addEventListener('mousemove', (e) => {
			console.log('mousemove', e);
			// get e.clientX relative to element.bounds
			let xRel = (e.clientX - 365) / innerElement.getBoundingClientRect().width;
			let yRel = e.clientY / innerElement.getBoundingClientRect().height;

			let xRange = xMax - xMin;
			let yRange = yMax - yMin;

			xRel = xMin + xRange * xRel;
			yRel = yMax - yRange * yRel;

			panEndPosRel = { x: xRel, y: yRel, xAbs: e.clientX - 365, yAbs: e.clientY };

			let newXDots = [];
			for (let line of $allLineData) {
				// line.calculateYatX(xRel);

				// getValueAtPrice(strike, x, kind, buySell) + (buySell === 'SELL' ? -price : price);

				let leg = line.leg;
				// const v =
				// 	getValueAtPrice(leg.strike, xRel, leg.kind, leg.buySell) +
				// 	(leg.buySell === 'SELL' ? -leg.price : leg.price) * leg.quantity;

				const value =
					getValueAtPrice(leg.strike, xRel, leg.kind, leg.buySell) +
					(leg.buySell === 'SELL' ? -leg.price : leg.price);
				const valueScaled = value * leg.quantity;

				// console.log(v);

				newXDots.push({ x: xRel, y: valueScaled, lineColor: leg.lineColor });

				// if (line.calculateYatX) {
				// xDots.push(line.line.calculateYatX(xRel));
				// }
			}

			const sumOfCurrentPos = newXDots.reduce((acc, item) => {
				const toAdd = isNaN(item.y) ? 0 : item.y;
				return acc + toAdd;
			}, 0);

			newXDots[newXDots.length - 1].y = sumOfCurrentPos;

			// replace the last y with the sum of all of the other y's
			// xDots[xDots.length - 1].y = xDots.reduce((acc, item) => {
			// 	const toAdd = isNaN(item.y) ? 0 : item.y;
			// 	return acc + toAdd;
			// });

			xDots.set(newXDots);
			console.log($xDots);

			// let yDots = [];

			// // get nearest above and below y to panEndPosRel.y for each line
			// for (let line of lines) {
			// 	let above = null;
			// 	let below = null;
			// 	for (let point of line.line) {
			// 		if (point.y > panEndPosRel.y) {
			// 			if (above == null) {
			// 				above = point;
			// 			} else {
			// 				if (point.y < above.y) {
			// 					above = point;
			// 				}
			// 			}
			// 		} else if (point.y < panEndPosRel.y) {
			// 			if (below == null) {
			// 				below = point;
			// 			} else {
			// 				if (point.y > below.y) {
			// 					below = point;
			// 				}
			// 			}
			// 		}
			// 	}
			// 	yDots.push({ above, below });
			// }

			// console.log({ yDots });

			if (isPanning) {
				// console.log('isPanning');
				// console.log('mousemove', e);
				panEndPos = { x: e.clientX, y: e.clientY };

				let panDiff = {
					x: panEndPos.x - panStartPos.x,
					y: panEndPos.y - panStartPos.y
				};

				// set xMin, xMax, yMin, yMax
				xMin -= Math.round(panDiff.x * 0.125);
				xMax -= Math.round(panDiff.x * 0.125);
				yMin += Math.round(panDiff.y * 0.075);
				yMax += Math.round(panDiff.y * 0.075);

				console.log('panDiff', panDiff);

				panStartPos = { x: e.clientX, y: e.clientY };

				// legs.update((legs) => {
				// 	return legs;
				// });

				if (timeout) {
					clearTimeout(timeout);
				}
				timeout = setTimeout(() => {
					// update the lines
					// let lines = calculateLines(legs);
					// allLineData.set(lines);

					legs.update((legs) => {
						return legs;
					});
				}, 0);
			}
		});

		innerElement.addEventListener('mouseup', (e) => {
			console.log('mouseup', e);
			isPanning = false;

			// console.log('panStartPos', panStartPos);
			// console.log('panEndPos', panEndPos);
		});

		// svgPanZoomInstance = svgPanZoom(innerElement);
		// svgPanZoomInstance.zoom(1 / svgPanZoomInstance.getSizes().realZoom); // TODO avoid this workaround
	});

	// gets a slightly lighter color than the hex provided
	const getColorOffset = (hex: string) => {};
</script>

<body class="bg-gray-800">
	<!--  a navbar that sits above eveyrhting else -->
	<div class="nav fixed top-0 left-0 right-0 z-50 shadow-md">
		<div class="flex items-center justify-between p-2 bg-gray-900 h-16 border-b border-gray-700">
			<div class="text-gray-100 text-xl">
				<div class="p-2.5 mt-1 flex items-center">
					<h1 style="font-family: 'Benne',serif;" class="text-gray-300 text-[24px] ml-3">
						optionplotr
					</h1>
					<i class="bi bi-x cursor-pointer ml-28 lg:hidden" />
				</div>
				<!-- <div class="my-2 bg-gray-600 h-[1px]" /> -->
			</div>

			<!-- <div class="flex items-center">
				<div class="text-gray-100 text-xl">
					<div class="p-2.5 mt-1 flex items-center">
						<h1 class="font-bold text-gray-200 text-[15px] ml-3">optionplotr</h1>
					</div>
					<div class="my-2 bg-gray-600 h-[1px]" />
				</div>
			</div>
			<div class="flex items-center">
				<div class="text-gray-100 text-xl">
					<div class="p-2.5 mt-1 flex items-center">
						<h1 class="font-bold text-gray-200 text-[15px] ml-3">optionplotr</h1>
					</div>
					<div class="my-2 bg-gray-600 h-[1px]" />
				</div>
			</div> -->
		</div>
	</div>

	<div
		class="sidebar fixed top-16 bottom-0 lg:left-0 p-2 w-[360px] overflow-y-auto text-center bg-gray-900"
	>
		<div
			class="mt-6 p-2.5 flex items-center rounded-md px-4 duration-300 cursor-pointer bg-gray-700 text-white"
		>
			<i class="bi bi-search text-sm" />
			<input
				type="text"
				placeholder="Type 'C' or 'P' to enter a CALL or PUT"
				class="text-[15px] ml-4 w-full bg-transparent focus:outline-none"
				on:keypress={handleEntryKey}
				bind:value={$entryValue}
			/>
		</div>
		<div class="p-2.5 flex items-center rounded-md px-0">
			<i class="bi bi-search text-sm" />

			<!-- {JSON.stringify(obj, null, 2)} -->
			<ul
				class="mb-2 mx-0 px-0 flex list-none flex-col flex-wrap pl-0 md:flex-row w-full"
				role="tablist"
				data-te-nav-ref
			>
				{#if obj.kind}
					<li role="presentation" class="mr-2">
						<span
							class="block rounded bg-green-600 px-3 py-2 text-xs font-medium uppercase"
							aria-selected="true">{obj.kind}</span
						>
					</li>
				{/if}

				{#if obj.strike}
					<li role="presentation" class="mr-2">
						<span
							class="block rounded bg-blue-600 px-3 py-2 text-xs font-medium uppercase"
							aria-selected="true">{obj.strike}</span
						>
					</li>
				{/if}

				{#if obj.buySell}
					<li role="presentation" class="mr-2">
						<span
							class="block rounded bg-orange-600 px-3 py-2 text-xs font-medium uppercase"
							aria-selected="true">{obj.buySell}</span
						>
					</li>
				{/if}

				{#if obj.quantity}
					<li role="presentation" class="mr-2">
						<span
							class="block rounded bg-pink-600 px-3 py-2 text-xs font-medium uppercase"
							aria-selected="true">{obj.quantity}</span
						>
					</li>
				{/if}

				{#if obj.price}
					<li role="presentation" class="mr-2">
						<span
							class="block rounded bg-purple-600 px-3 py-2 text-xs font-medium uppercase"
							aria-selected="true">{obj.price}</span
						>
					</li>
				{/if}
			</ul>
		</div>

		<div class="p-2.5 mt-1 flex items-center rounded-md px-2 duration-300 text-gray-500">
			{#if obj.kind && obj.strike && obj.buySell && obj.quantity && obj.price}
				<button
					class="block rounded px-3 py-2 text-xs font-medium uppercase w-full bg-green-600 text-white"
					aria-selected="true"
					on:click={handleOnAddLeg}
				>
					Add
				</button>
			{/if}
		</div>
		<div class="p-2.5 mt-3 flex items-center rounded-md px-2 duration-300 text-gray-500">
			<i class="bi bi-house-door-fill" />
			<span class="text-[15px] ml-4 font-bold">Legs</span>
		</div>

		{#if legs.length === 0}
			<div class="p-2.5 mt-3 flex items-center rounded-md px-2 duration-300 text-gray-500">
				<i class="bi bi-house-door-fill" />
				<span class="text-[15px] ml-4 font-bold">No Legs</span>
			</div>
		{/if}

		<!-- for each item in the leg array -->
		{#each $legs as leg, legIndex}
			<Leg
				{legIndex}
				onChangeShowOnChart={(showOnChart) => handleOnChangeShowOnChart(showOnChart, leg)}
				onChangeSpotlight={(spotlight) => handleOnChageSpotlight(spotlight, leg)}
				onRemoveLegAtIndex={() => handleOnRemoveLegAtIndex(legIndex)}
				showOnChart={leg.showOnChart}
				spotlight={leg.spotlight}
				kind={leg.kind}
				buySell={leg.buySell}
				strike={leg.strike}
				price={leg.price}
				quantity={leg.quantity}
				lineColor={leg.lineColor}
			/>
		{/each}
	</div>

	<div
		class="content bg-gray-800 fixed top-0 bottom-0 lg:left-[360px] p-2 overflow-y-auto text-center bg-white-900"
		style={`width: calc(100% - 360px);  cursor: none; overflow: hidden;`}
	>
		<LayerCake
			padding={{ top: 8, right: 10, bottom: 20, left: 25 }}
			x={xKey}
			y={yKey}
			yDomain={[yMin, yMax]}
			xDomain={[xMin, xMax]}
			data={$data}
		>
			<Svg bind:this={svgElement}>
				<AxisX ticks={6} />
				<AxisY ticks={6} />
				<!-- <Line /> -->

				<!-- draw line at 0 -->
				<Line
					stroke="#555"
					_data={[
						{ x: xMin, y: 0 },
						{ x: xMax, y: 0 }
					]}
				/>

				<!-- draw line at 0 -->
				<Line
					stroke="#555"
					_data={[
						{ x: 0, y: yMin },
						{ x: 0, y: yMax }
					]}
				/>

				<!-- draw each line in $data -->
				{#each $allLineData as item}
					<!-- if items.leg.showOnChart -->
					{#if item.leg.showOnChart}
						<Line
							_data={item.line}
							stroke={item.leg.lineColor}
							strokeWidth={item.leg.spotlight ? 10 : 2}
						/>
					{/if}

					<!-- <Line _data={item.line} stroke={item.leg.lineColor} /> -->
				{/each}

				<Line
					stroke="#4d618a"
					_data={[
						{ x: xMin, y: panEndPosRel.y },
						{ x: xMax, y: panEndPosRel.y }
					]}
				/>

				<Line
					stroke="#4d618a"
					_data={[
						{ x: panEndPosRel.x, y: yMin },
						{ x: panEndPosRel.x, y: yMax }
					]}
				/>

				{#each $xDots as dot}
					<Circle x={dot.x} y={dot.y} r={4} stroke={'#DDD'} fill={dot.lineColor} strokeWidth={1} />
				{/each}

				<!-- add circle for current user pos -->

				<Circle
					x={panEndPosRel.x}
					y={panEndPosRel.y}
					r={4}
					stroke={'#4d618a'}
					fill={'#4d618a'}
					strokeWidth={1}
				/>
			</Svg>
		</LayerCake>

		<!-- <div use:draggable>
			<div
				style="transform: translate(50vw, -10vh);"
				class={`absolute w-[560px] h-[560px] bg-gray-900 text-gray-700 text-sm p-2 rounded-md`}
			>
				<div
					class="p-1.5 flex items-center rounded-md px-4 duration-300 cursor-pointer text-white"
					style="display: flex; justify-content: space-between;"
				>
					Debug Info
				</div>
				<pre
					class="p-1.5 text-left flex items-center rounded-md px-4 duration-300 cursor-pointer text-white"
					style="display: flex; justify-content: space-between;">
					{JSON.stringify(legs, null, 2)}
				</pre>
			</div>
		</div> -->

		<div>
			<div
				style="top: 80px; right: 30px;"
				class={`absolute flex w-[200px] h-[36px] font-bold bg-gray-900 text-gray-500 text-sm px-3 py-2 text-left rounded-md`}
			>
				<svg
					xmlns="http://www.w3.org/2000/svg"
					class="h-6 w-6 ml-2 mr-6"
					fill={'#FFF'}
					viewBox="0 0 24 24"
					stroke={'#FFF'}
				>
					<circle cx="12" cy="12" r="10" />
				</svg>
				({panEndPosRel.x.toFixed(2)}, {panEndPosRel.y.toFixed(2)})
			</div>
		</div>

		<!-- iterate over the xDots -->
		<div
			style="top: {130 + 10 * 50}px; right: {30}px;"
			class={`absolute flex w-[200px] h-[40px] font-bold bg-blue-700 text-white text-sm px-3 py-2 text-left rounded-md`}
		>
			<input
				type="text"
				placeholder={panEndPosRel.x.toFixed(2)}
				class="text-[15px] ml-4 w-full bg-transparent focus:outline-none"
			/>
			<input
				type="text"
				placeholder={panEndPosRel.y.toFixed(2)}
				class="text-[15px] ml-4 w-full bg-transparent focus:outline-none"
			/>
		</div>

		{#each $xDots as dot, dotIndex}
			<div
				style="top: {130 + dotIndex * 50}px; right: {30}px;"
				class={`absolute flex w-[200px] h-[36px] font-bold bg-gray-900 text-gray-500 text-sm px-3 py-2 text-left rounded-md`}
			>
				<!-- a colored circle -->
				<svg
					xmlns="http://www.w3.org/2000/svg"
					class="h-6 w-6 ml-2 mr-6"
					fill={dot.lineColor}
					viewBox="0 0 24 24"
					stroke={dot.lineColor}
				>
					<circle cx="12" cy="12" r="10" />
				</svg>

				({dot.x.toFixed(2)}, {dot.y.toFixed(2)})
			</div>
		{/each}

		<div use:draggable>
			<div
				style="transform: translate(calc(100vw - 360px - 300px), -20vh);"
				class={`absolute w-[260px] ${
					showStats ? 'h-[190px]' : 'h-[50px]'
				} bg-gray-900 text-gray-700 text-sm p-2 rounded-md`}
			>
				<!-- svelte-ignore a11y-click-events-have-key-events -->
				<div
					class="p-1.5 flex items-center rounded-md px-4 duration-300 cursor-pointer text-white"
					style="display: flex; justify-content: space-between;"
					on:click={() => (showStats = !showStats)}
				>
					Statistics
					<!-- svelte-ignore a11y-click-events-have-key-events -->
					<!-- <svg
						xmlns="http://www.w3.org/2000/svg"
						class="h-6 w-6 ml-2"
						fill="none"
						viewBox="0 0 24 24"
						stroke="currentColor"
						
					>
						<path
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d="M19 9l-7 7-7-7"
						/>
					</svg> -->

					<Icon src={showStats ? ChevronDown : ChevronUp} class="h-6 w-6 ml-2" />
				</div>
				{#if showStats}
					<div class="my-2 bg-gray-600 h-[1px]" />

					<div
						class="flex rounded-md px-2 text-white pb-1"
						style="display: flex; justify-content: space-between;"
					>
						<span class="text-sm text-gray-600 font-bold">Total Equity Cost</span>
						<span class="text-sm text-gray-200 font-bold ml-4">
							<!-- the sum of all of the BUY legs -->
							$0
						</span>
					</div>

					<div
						class="flex rounded-md px-2 text-white pb-1"
						style="display: flex; justify-content: space-between;"
					>
						<span class="text-sm text-gray-600 font-bold">Sum Short</span>
						<span class="text-sm text-gray-200 font-bold ml-4">
							${$legs
								.map((leg) => (leg.buySell === 'SELL' ? leg.price * leg.quantity : 0))
								.reduce((a, b) => a + b, 0) * 100}</span
						>
					</div>

					<div
						class="flex rounded-md px-2 text-white pb-1"
						style="display: flex; justify-content: space-between;"
					>
						<span class="text-sm text-gray-600 font-bold">Sum Long</span>
						<span class="text-sm text-gray-200 font-bold ml-4">
							${$legs
								.map((leg) => (leg.buySell === 'BUY' ? leg.price * leg.quantity : 0))
								.reduce((a, b) => a + b, 0) * 100}</span
						>
					</div>

					<div
						class="flex rounded-md px-2 text-white pb-1"
						style="display: flex; justify-content: space-between;"
					>
						<span class="text-sm text-gray-600 font-bold">Out of pocket</span>
						<span class="text-sm text-gray-200 font-bold ml-4"
							>${($legs
								.map((leg) => (leg.buySell === 'SELL' ? leg.price * leg.quantity : 0))
								.reduce((a, b) => a + b, 0) -
								$legs
									.map((leg) => (leg.buySell === 'BUY' ? leg.price * leg.quantity : 0))
									.reduce((a, b) => a + b, 0)) *
								100}</span
						>
					</div>

					<!-- <div
						class="flex rounded-md px-2 text-white pb-1"
						style="display: flex; justify-content: space-between;"
					>
						<span class="text-sm text-gray-600 font-bold">Type</span>
						<span class="text-sm text-gray-200 font-bold ml-4">$1,000</span>
					</div>

					<div
						class="flex rounded-md px-2 text-white pb-1"
						style="display: flex; justify-content: space-between;"
					>
						<span class="text-sm text-gray-600 font-bold">Classified</span>
						<span class="text-sm text-gray-200 font-bold ml-4">$1,000</span>
					</div>

					<div
						class="flex rounded-md px-2 text-white pb-1"
						style="display: flex; justify-content: space-between;"
					>
						<span class="text-sm text-gray-600 font-bold">Collateral</span>
						<span class="text-sm text-gray-200 font-bold ml-4">$1,000</span>
					</div> -->
				{/if}
			</div>
		</div>
	</div>
</body>
